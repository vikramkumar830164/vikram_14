{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNzhc/AxME8Og5khFIOcVwc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["\n","\n","1. Setup - Importing the Library\n","First things first, we need to import the Pandas library into our Colab environment. The standard practice is to import it with the alias pd. Yeh ek tradition hai, ise follow karna zaroori hai!\n","\n"],"metadata":{"id":"yh2fprahqbYi"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1zT14x_1p2xh","executionInfo":{"status":"ok","timestamp":1752122931496,"user_tz":-330,"elapsed":704,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"ab8f448c-7b80-4e26-cc87-25608ca19d6f"},"outputs":[{"output_type":"stream","name":"stdout","text":["You are running Pandas version: 2.2.2. Setup complete!\n"]}],"source":["# Import the Pandas library, our main tool for today\n","import pandas as pd\n","# We'll also import NumPy, as it works closely with Pandas\n","import numpy as np\n","\n","# Let's check the version we are using\n","print(f\"You are running Pandas version: {pd.__version__}. Setup complete!\")"]},{"cell_type":"markdown","source":["2. The Core of Pandas: Series and DataFrame\n","Pandas has two primary data structures that you need to understand. Ye Pandas ke dil aur dimaag hain.\n","A. Series: The One-Dimensional Star\n","A Series is essentially a single column of data. It's like a Python list or an array, but with an associated index for each value.\n"],"metadata":{"id":"deJdiV8mqoFC"}},{"cell_type":"code","source":["# Cell 2: Creating a Series\n","# Let's create a Series from a simple Python list.\n","\n","# A list of cricket scores\n","scores = [102, 88, 45, 99, 12]\n","player_series = pd.Series(scores)\n","\n","print(\"Here is our first Pandas Series:\")\n","print(player_series)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0mOD2DiNqtra","executionInfo":{"status":"ok","timestamp":1752122991402,"user_tz":-330,"elapsed":18,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"3acf4c85-75af-41d3-8da9-04b6c8297e22"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Here is our first Pandas Series:\n","0    102\n","1     88\n","2     45\n","3     99\n","4     12\n","dtype: int64\n"]}]},{"cell_type":"markdown","source":["B. DataFrame: The Real OG!!!!\n","This is the most important and widely used structure in Pandas. A DataFrame is a 2D table with rows and columns, just like a spreadsheet. Data ka asli playground yahi hai.\n","Cell 3: Creating a DataFrame from a Dictionary\n","A common way to create a DataFrame is from a Python dictionary."],"metadata":{"id":"WLgyDjTCq49q"}},{"cell_type":"code","source":["# Let's create some sample data for a few employees\n","employee_data = {\n","    'EmployeeID': [101, 102, 103, 104],\n","    'Name': ['Akash', 'Priya', 'Rohan', 'Sneha'],\n","    'Department': ['IT', 'HR', 'IT', 'Finance'],\n","    'Salary': [90000, 75000, 82000, 95000]\n","}\n","\n","# Now, convert this dictionary into a DataFrame\n","df = pd.DataFrame(employee_data)\n","\n","print(\"Your first DataFrame is ready! Mubarak ho!\")\n","df # In Colab, the variable name at the end of a cell gives a nice display"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":192},"id":"XalSX3q7q4pi","executionInfo":{"status":"ok","timestamp":1752123040155,"user_tz":-330,"elapsed":150,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"b1ad715a-63c6-4e73-ed8f-742cc4ab9393"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Your first DataFrame is ready! Mubarak ho!\n"]},{"output_type":"execute_result","data":{"text/plain":["   EmployeeID   Name Department  Salary\n","0         101  Akash         IT   90000\n","1         102  Priya         HR   75000\n","2         103  Rohan         IT   82000\n","3         104  Sneha    Finance   95000"],"text/html":["\n","  <div id=\"df-4d353107-0a63-4c28-b472-f23a97151809\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>EmployeeID</th>\n","      <th>Name</th>\n","      <th>Department</th>\n","      <th>Salary</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>101</td>\n","      <td>Akash</td>\n","      <td>IT</td>\n","      <td>90000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>102</td>\n","      <td>Priya</td>\n","      <td>HR</td>\n","      <td>75000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>103</td>\n","      <td>Rohan</td>\n","      <td>IT</td>\n","      <td>82000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>104</td>\n","      <td>Sneha</td>\n","      <td>Finance</td>\n","      <td>95000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d353107-0a63-4c28-b472-f23a97151809')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4d353107-0a63-4c28-b472-f23a97151809 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4d353107-0a63-4c28-b472-f23a97151809');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-82e7b6ce-289a-4249-9188-1128d8483973\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82e7b6ce-289a-4249-9188-1128d8483973')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-82e7b6ce-289a-4249-9188-1128d8483973 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_9ae897f4-ede6-42ae-8b3e-143c9625ae07\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9ae897f4-ede6-42ae-8b3e-143c9625ae07 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"EmployeeID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 101,\n        \"max\": 104,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          102,\n          104,\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Priya\",\n          \"Sneha\",\n          \"Akash\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Department\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"IT\",\n          \"HR\",\n          \"Finance\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8812,\n        \"min\": 75000,\n        \"max\": 95000,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          75000,\n          95000,\n          90000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","source":["3. Bringing in the Data: Reading CSV Files\n","In real-world scenarios, data is usually stored in files. The most common format is CSV (Comma Separated Values). Pandas makes reading these files incredibly easy with pd.read_csv().\n","Cell 4: Reading a CSV from the Web\n","We will load the famous Titanic dataset directly from a URL. Internet se seedha data uthate hain!\n","Generated python\n"],"metadata":{"id":"bGz1nLnQrEy6"}},{"cell_type":"code","source":["# URL for the Titanic dataset\n","url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'\n","\n","# Use pd.read_csv() to load the data into a DataFrame\n","titanic_df = pd.read_csv(url)\n","\n","print(\"Titanic dataset has been successfully loaded!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ueQoD3-erF7B","executionInfo":{"status":"ok","timestamp":1752123095527,"user_tz":-330,"elapsed":142,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"eaf05f7d-a270-4d4b-9570-030c8935fb29"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Titanic dataset has been successfully loaded!\n"]}]},{"cell_type":"markdown","source":["4. First Look: Viewing and Inspecting Data\n","Now that our data is loaded, it's time for some initial investigation. Yeh data se pehli mulaqat jaisa hai.\n","Cell 5: The .head() and .tail() methods\n",".head(n): Shows you the first n rows of the data (default is 5).\n",".tail(n): Shows you the last n rows of the data (default is 5)."],"metadata":{"id":"5cYJYE3VrP4B"}},{"cell_type":"code","source":["# Let's view the first 5 rows\n","print(\"--- Top 5 rows of the dataset ---\")\n","display(titanic_df.head())\n","\n","# Now let's see the last 3 rows\n","print(\"\\n--- Last 3 rows of the dataset ---\")\n","display(titanic_df.tail(3))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":385},"id":"aHIZhTverQvC","executionInfo":{"status":"ok","timestamp":1752123128365,"user_tz":-330,"elapsed":323,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"71ba6e53-ec41-4553-b48b-ce817cfa2bae"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Top 5 rows of the dataset ---\n"]},{"output_type":"display_data","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "],"text/html":["\n","  <div id=\"df-f766b6d2-fcb0-43ce-a370-5838ad2c5b5a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f766b6d2-fcb0-43ce-a370-5838ad2c5b5a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f766b6d2-fcb0-43ce-a370-5838ad2c5b5a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f766b6d2-fcb0-43ce-a370-5838ad2c5b5a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-0bd4eac9-95f0-43ad-902e-c5aa7b9de17a\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0bd4eac9-95f0-43ad-902e-c5aa7b9de17a')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-0bd4eac9-95f0-43ad-902e-c5aa7b9de17a button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(titanic_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\",\n          \"Allen, Mr. William Henry\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.833739825307955,\n        \"min\": 22.0,\n        \"max\": 38.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          38.0,\n          35.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"PC 17599\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.5100288352535,\n        \"min\": 7.25,\n        \"max\": 71.2833,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          71.2833\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C123\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","--- Last 3 rows of the dataset ---\n"]},{"output_type":"display_data","data":{"text/plain":["     PassengerId  Survived  Pclass                                      Name  \\\n","888          889         0       3  Johnston, Miss. Catherine Helen \"Carrie\"   \n","889          890         1       1                     Behr, Mr. Karl Howell   \n","890          891         0       3                       Dooley, Mr. Patrick   \n","\n","        Sex   Age  SibSp  Parch      Ticket   Fare Cabin Embarked  \n","888  female   NaN      1      2  W./C. 6607  23.45   NaN        S  \n","889    male  26.0      0      0      111369  30.00  C148        C  \n","890    male  32.0      0      0      370376   7.75   NaN        Q  "],"text/html":["\n","  <div id=\"df-7edc0a67-8201-412e-bca4-ff1e543c5654\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.45</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>890</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Behr, Mr. Karl Howell</td>\n","      <td>male</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111369</td>\n","      <td>30.00</td>\n","      <td>C148</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>891</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Dooley, Mr. Patrick</td>\n","      <td>male</td>\n","      <td>32.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>370376</td>\n","      <td>7.75</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7edc0a67-8201-412e-bca4-ff1e543c5654')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7edc0a67-8201-412e-bca4-ff1e543c5654 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7edc0a67-8201-412e-bca4-ff1e543c5654');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-266259fc-a159-41c9-b5c9-479a10e60405\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-266259fc-a159-41c9-b5c9-479a10e60405')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-266259fc-a159-41c9-b5c9-479a10e60405 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(titanic_df\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 889,\n        \"max\": 891,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          889,\n          890,\n          891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Johnston, Miss. Catherine Helen \\\"Carrie\\\"\",\n          \"Behr, Mr. Karl Howell\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.242640687119285,\n        \"min\": 26.0,\n        \"max\": 32.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          32.0,\n          26.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"W./C. 6607\",\n          \"111369\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.434268669224107,\n        \"min\": 7.75,\n        \"max\": 30.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          23.45,\n          30.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"C148\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# Get a full summary of the DataFrame\n","print(\"--- DataFrame Info ---\")\n","titanic_df.info()\n","\n","print(\"\\n\\n--- Statistical Summary (.describe()) ---\")\n","display(titanic_df.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":700},"id":"2S_wrrs-xCwY","executionInfo":{"status":"ok","timestamp":1752124634589,"user_tz":-330,"elapsed":75,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"3c8be91b-e389-4929-db54-760e754fcd74"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["--- DataFrame Info ---\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n","\n","\n","--- Statistical Summary (.describe()) ---\n"]},{"output_type":"display_data","data":{"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "],"text/html":["\n","  <div id=\"df-1c355ff4-4fa0-4216-bfc0-b6b1d8997329\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1c355ff4-4fa0-4216-bfc0-b6b1d8997329')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1c355ff4-4fa0-4216-bfc0-b6b1d8997329 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1c355ff4-4fa0-4216-bfc0-b6b1d8997329');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-31d9663a-eb08-4cd4-b888-b28ae6cd8559\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-31d9663a-eb08-4cd4-b888-b28ae6cd8559')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-31d9663a-eb08-4cd4-b888-b28ae6cd8559 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(titanic_df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429856,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079693,\n        \"min\": 0.8360712409770513,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228577,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# Get the dimensions of our data\n","print(f\"The shape of our data is: {titanic_df.shape}\")\n","print(f\"This means it has {titanic_df.shape[0]} rows and {titanic_df.shape[1]} columns.\")\n","\n","# Get all the column names\n","print(\"\\nHere are all the column names:\")\n","print(titanic_df.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rATatmXoxDQn","executionInfo":{"status":"ok","timestamp":1752124659148,"user_tz":-330,"elapsed":41,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"a006681e-dae5-4192-8646-be828c1c837b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["The shape of our data is: (891, 12)\n","This means it has 891 rows and 12 columns.\n","\n","Here are all the column names:\n","Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n","       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["# This is where the real power of Pandas begins. Let's learn how to select and filter the data we need.\n","# Cell 8: Selecting a Single Column\n","# To select a single column, use square brackets [] with the column name.\n","# Generated python\n","# Let's select the 'Age' column\n","ages = titanic_df['Age']\n","\n","print(\"Displaying the 'Age' column (which is a Series):\")\n","display(ages.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":258},"id":"MYk_e3KpxNmZ","executionInfo":{"status":"ok","timestamp":1752124684380,"user_tz":-330,"elapsed":29,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"83ee46b3-1fda-484a-a5fc-77e32ae83e46"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Displaying the 'Age' column (which is a Series):\n"]},{"output_type":"display_data","data":{"text/plain":["0    22.0\n","1    38.0\n","2    26.0\n","3    35.0\n","4    35.0\n","Name: Age, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>22.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>38.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>35.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>35.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{}}]},{"cell_type":"code","source":["# Select 'Name', 'Sex', and 'Fare' columns\n","subset_df = titanic_df[['Name', 'Sex', 'Fare']]\n","\n","print(\"A subset of our DataFrame:\")\n","display(subset_df.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"17PlbBRpyNfn","executionInfo":{"status":"ok","timestamp":1752124953000,"user_tz":-330,"elapsed":45,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"cc5a3d95-cb08-4340-e2b8-16bd20e598a6"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["A subset of our DataFrame:\n"]},{"output_type":"display_data","data":{"text/plain":["                                                Name     Sex     Fare\n","0                            Braund, Mr. Owen Harris    male   7.2500\n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  71.2833\n","2                             Heikkinen, Miss. Laina  female   7.9250\n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  53.1000\n","4                           Allen, Mr. William Henry    male   8.0500"],"text/html":["\n","  <div id=\"df-d33fc818-80b3-4f59-aa11-db4a5877467e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>7.2500</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>71.2833</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>7.9250</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>53.1000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>8.0500</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d33fc818-80b3-4f59-aa11-db4a5877467e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d33fc818-80b3-4f59-aa11-db4a5877467e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d33fc818-80b3-4f59-aa11-db4a5877467e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-870248eb-c32f-4dcf-baf7-7cc25b6fae62\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-870248eb-c32f-4dcf-baf7-7cc25b6fae62')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-870248eb-c32f-4dcf-baf7-7cc25b6fae62 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(subset_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\",\n          \"Allen, Mr. William Henry\",\n          \"Heikkinen, Miss. Laina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.5100288352535,\n        \"min\": 7.25,\n        \"max\": 71.2833,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          71.2833,\n          8.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# Condition: Pclass == 1\n","first_class_passengers = titanic_df[titanic_df['Pclass'] == 1]\n","\n","print(\"Displaying only 1st Class passengers:\")\n","display(first_class_passengers.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"tf2XrBAUyRAP","executionInfo":{"status":"ok","timestamp":1752124963815,"user_tz":-330,"elapsed":102,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"a8fad7e7-6daf-4291-f159-29d46e8d30d8"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Displaying only 1st Class passengers:\n"]},{"output_type":"display_data","data":{"text/plain":["    PassengerId  Survived  Pclass  \\\n","1             2         1       1   \n","3             4         1       1   \n","6             7         0       1   \n","11           12         1       1   \n","23           24         1       1   \n","\n","                                                 Name     Sex   Age  SibSp  \\\n","1   Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","3        Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","6                             McCarthy, Mr. Timothy J    male  54.0      0   \n","11                           Bonnell, Miss. Elizabeth  female  58.0      0   \n","23                       Sloper, Mr. William Thompson    male  28.0      0   \n","\n","    Parch    Ticket     Fare Cabin Embarked  \n","1       0  PC 17599  71.2833   C85        C  \n","3       0    113803  53.1000  C123        S  \n","6       0     17463  51.8625   E46        S  \n","11      0    113783  26.5500  C103        S  \n","23      0    113788  35.5000    A6        S  "],"text/html":["\n","  <div id=\"df-846d26e4-0806-476d-810d-f9c7ae626da0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>McCarthy, Mr. Timothy J</td>\n","      <td>male</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17463</td>\n","      <td>51.8625</td>\n","      <td>E46</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>12</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Bonnell, Miss. Elizabeth</td>\n","      <td>female</td>\n","      <td>58.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113783</td>\n","      <td>26.5500</td>\n","      <td>C103</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>24</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Sloper, Mr. William Thompson</td>\n","      <td>male</td>\n","      <td>28.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113788</td>\n","      <td>35.5000</td>\n","      <td>A6</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-846d26e4-0806-476d-810d-f9c7ae626da0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-846d26e4-0806-476d-810d-f9c7ae626da0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-846d26e4-0806-476d-810d-f9c7ae626da0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-9725c438-9eea-4afb-b74e-134f7e8c062c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9725c438-9eea-4afb-b74e-134f7e8c062c')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-9725c438-9eea-4afb-b74e-134f7e8c062c button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(first_class_passengers\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 2,\n        \"max\": 24,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          24,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Futrelle, Mrs. Jacques Heath (Lily May Peel)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.83744522870497,\n        \"min\": 28.0,\n        \"max\": 58.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          35.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"113803\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17.311936673954186,\n        \"min\": 26.55,\n        \"max\": 71.2833,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          53.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"C123\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"markdown","source":["You can combine conditions using & (AND) and | (OR). Let's find all the female passengers who survived.\n","Important: Har condition ko hamesha parenthesis () ke andar rakho!"],"metadata":{"id":"CU3V91sfyd23"}},{"cell_type":"code","source":["# Condition 1: Sex is 'female'\n","# Condition 2: Survived is 1\n","survived_females = titanic_df[(titanic_df['Sex'] == 'female') & (titanic_df['Survived'] == 1)]\n","\n","print(\"Female passengers who survived:\")\n","display(survived_females.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"Q8bsV34xyZko","executionInfo":{"status":"ok","timestamp":1752124991211,"user_tz":-330,"elapsed":85,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"9ac1c867-82a8-4b15-ce2f-6c4c102dd235"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Female passengers who survived:\n"]},{"output_type":"display_data","data":{"text/plain":["   PassengerId  Survived  Pclass  \\\n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","8            9         1       3   \n","9           10         1       2   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","8  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  female  27.0      0   \n","9                Nasser, Mrs. Nicholas (Adele Achem)  female  14.0      1   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","8      2            347742  11.1333   NaN        S  \n","9      0            237736  30.0708   NaN        C  "],"text/html":["\n","  <div id=\"df-e3ae19e0-17d8-4c8f-98d6-e2e58100ab2b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n","      <td>female</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>347742</td>\n","      <td>11.1333</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n","      <td>female</td>\n","      <td>14.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>237736</td>\n","      <td>30.0708</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3ae19e0-17d8-4c8f-98d6-e2e58100ab2b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e3ae19e0-17d8-4c8f-98d6-e2e58100ab2b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e3ae19e0-17d8-4c8f-98d6-e2e58100ab2b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-876e40a5-f61e-4593-b28d-10aee915238c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-876e40a5-f61e-4593-b28d-10aee915238c')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-876e40a5-f61e-4593-b28d-10aee915238c button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"display(survived_females\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2,\n        \"max\": 10,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3,\n          10,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Heikkinen, Miss. Laina\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.354143466934854,\n        \"min\": 14.0,\n        \"max\": 38.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          26.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ticket\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"STON/O2. 3101282\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27.25168469410653,\n        \"min\": 7.925,\n        \"max\": 71.2833,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7.925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cabin\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"C123\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Embarked\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","source":["# Check for missing values in each column\n","print(\"Count of missing values per column:\")\n","print(titanic_df.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dIzl5s-2ymv4","executionInfo":{"status":"ok","timestamp":1752125077689,"user_tz":-330,"elapsed":55,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"4255717b-8180-4d11-f280-5603d7f033de"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Count of missing values per column:\n","PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64\n"]}]},{"cell_type":"code","source":["# Calculate the mean of the 'Age' column\n","mean_age = titanic_df['Age'].mean()\n","print(f\"The average age is: {mean_age:.2f}\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1jmk4ioDyvcJ","executionInfo":{"status":"ok","timestamp":1752125112196,"user_tz":-330,"elapsed":15,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"02648bb5-9205-45bd-c35e-bf4c136e5304"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["The average age is: 29.70\n"]}]},{"cell_type":"code","source":["# Create a copy to keep the original data safe\n","titanic_df_cleaned = titanic_df.copy()\n"],"metadata":{"id":"ZwNI-zMMy0XP","executionInfo":{"status":"ok","timestamp":1752125116107,"user_tz":-330,"elapsed":6,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["\n","# Fill the NaN values in the 'Age' column with the mean age\n","titanic_df_cleaned['Age'].fillna(mean_age, inplace=True)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P5oAH1xvy11_","executionInfo":{"status":"ok","timestamp":1752125114526,"user_tz":-330,"elapsed":6,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"3e213587-63f0-443a-a297-487401635565"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-17-4262332125.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  titanic_df_cleaned['Age'].fillna(mean_age, inplace=True)\n"]}]},{"cell_type":"code","source":["\n","# Let's verify if the missing values in 'Age' are gone\n","print(\"\\nMissing values count after cleaning 'Age' column:\")\n","print(titanic_df_cleaned.isnull().sum())\n","print(\"\\nPerfect! 'Age' column mein ab 0 missing values hain.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4HqSbPqhy3RH","executionInfo":{"status":"ok","timestamp":1752125118427,"user_tz":-330,"elapsed":11,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"1c50f0ca-a31d-4b8d-d4ce-991ec6657b3f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Missing values count after cleaning 'Age' column:\n","PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64\n","\n","Perfect! 'Age' column mein ab 0 missing values hain.\n"]}]},{"cell_type":"code","source":["# How many passengers embarked from each port?\n","print(\"--- Passenger count by Port of Embarkation ---\")\n","print(titanic_df['Embarked'].value_counts())\n","\n","print(\"\\n--- Passenger count by Gender ---\")\n","print(titanic_df['Sex'].value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hoPY_9wcy-EP","executionInfo":{"status":"ok","timestamp":1752125139188,"user_tz":-330,"elapsed":15,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"b4b21ccf-a343-4461-8816-b73173c8a3bb"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Passenger count by Port of Embarkation ---\n","Embarked\n","S    644\n","C    168\n","Q     77\n","Name: count, dtype: int64\n","\n","--- Passenger count by Gender ---\n","Sex\n","male      577\n","female    314\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["# Group by 'Pclass' and calculate the mean of 'Fare' for each class\n","avg_fare_by_class = titanic_df.groupby('Pclass')['Fare'].mean()\n","\n","print(\"Average fare by passenger class:\")\n","print(avg_fare_by_class)\n","\n","# Let's try another one: survival rate by gender\n","survival_rate_by_gender = titanic_df.groupby('Sex')['Survived'].mean() * 100\n","print(\"\\nSurvival rate by gender (%):\")\n","print(survival_rate_by_gender)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vLFbzF1Yy-d_","executionInfo":{"status":"ok","timestamp":1752125148052,"user_tz":-330,"elapsed":8,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"5a01b208-251d-4bf6-9c39-87726cb62805"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Average fare by passenger class:\n","Pclass\n","1    84.154687\n","2    20.662183\n","3    13.675550\n","Name: Fare, dtype: float64\n","\n","Survival rate by gender (%):\n","Sex\n","female    74.203822\n","male      18.890815\n","Name: Survived, dtype: float64\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"r1y2gbN1zAoe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Agar Pandas data ka 'Engineer' hai, toh Matplotlib uska 'Artist' hai. It helps us create charts, graphs, and figures to understand and present our findings visually.\n","Today's Agenda:\n","Why Visualize? Tasveerein kyun zaroori hain?\n","\n","Getting Started: Importing Matplotlib\n","The Anatomy of a Plot: Figure and Axes (Plot ka Postmortem)\n"],"metadata":{"id":"u-S-A-hUzGMf"}},{"cell_type":"code","source":["\n","# Essential Plots:\n","# Line Plot\n","# Scatter Plot\n","# Bar Chart\n","# Histogram\n","# Customizing Plots: Apne Plot ko Sundar Banao\n","# Using Pandas with Matplotlib: The Perfect Jodi\n","# Subplots: One Figure, Multiple Stories\n"],"metadata":{"id":"AgLrruTzzRmY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import our main plotting library\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import numpy as np\n","\n","# This line is specific to Jupyter/Colab notebooks to display plots inline\n","%matplotlib inline\n","\n","# Let's get our data ready again. Data ke bina kya plot karoge?\n","url = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'\n","titanic_df = pd.read_csv(url)\n","\n","# A quick fix from last class: filling missing age values\n","mean_age = titanic_df['Age'].mean()\n","titanic_df['Age'].fillna(mean_age, inplace=True)\n","\n","print(\"Libraries and data are ready. Chalo, painting shuru karein!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G7w3wFWEzV3X","executionInfo":{"status":"ok","timestamp":1752125237121,"user_tz":-330,"elapsed":115,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"222fc80a-094f-475a-b297-4fce2d8e69af"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Libraries and data are ready. Chalo, painting shuru karein!\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-22-1396140377.py:15: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  titanic_df['Age'].fillna(mean_age, inplace=True)\n"]}]},{"cell_type":"code","source":["# Create a figure and a single axes\n","fig, ax = plt.subplots()\n","\n","print(\"Figure object:\", fig)\n","print(\"Axes object:\", ax)\n","print(\"\\nEk khaali canvas taiyaar hai!\")\n","# At this point, it will just show an empty plot."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":504},"id":"2cK4SP3yzbPX","executionInfo":{"status":"ok","timestamp":1752125258846,"user_tz":-330,"elapsed":225,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"2ac7303e-2c83-423c-b331-c27c12e09091"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Figure object: Figure(640x480)\n","Axes object: Axes(0.125,0.11;0.775x0.77)\n","\n","Ek khaali canvas taiyaar hai!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":[],"metadata":{"id":"rzswc7R4zMe3"}},{"cell_type":"code","source":["# A. Line Plot - The Story of a Trend\n","# Line plots are excellent for showing how a quantity changes over time or another continuous variable. Kisi cheez ka utaar-chadhaav dikhane ke liye best hai."],"metadata":{"id":"686OQDvqznXv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Sample data\n","year = [2018, 2019, 2020, 2021, 2022]\n","sales = [100, 120, 90, 150, 180]\n","\n","# Create a figure and axes\n","fig, ax = plt.subplots()\n","\n","# Plot the data on the axes\n","ax.plot(year, sales)\n","\n","print(\"Hamara pehla Line Plot!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"P5G5wya6zgkn","executionInfo":{"status":"ok","timestamp":1752125280766,"user_tz":-330,"elapsed":212,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"dccfc830-7f04-4f84-897c-1672b98d656e"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Hamara pehla Line Plot!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["# B. Scatter Plot - The Relationship Detective\n","# Scatter plots are used to see the relationship between two numerical variables. Yeh dekhne ke liye ki kya ek cheez ke badhne se doosri bhi badhti hai ya ghat'ti hai.\n","# Cell 4: Creating a Scatter Plot\n","# We'll use our Titanic data for this. Let's see if there's a relationship between a passenger's Age and the Fare they paid.\n"],"metadata":{"id":"_zD-aq6Mzg-u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","# Create a figure and axes\n","fig, ax = plt.subplots()\n","\n","# Use the scatter function\n","ax.scatter(titanic_df['Age'], titanic_df['Fare'])\n","\n","print(\"Relationship between Age and Fare:\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"KlwKl7Coztpv","executionInfo":{"status":"ok","timestamp":1752125340845,"user_tz":-330,"elapsed":283,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"abe89083-1559-49f9-a7c9-6609b1e69218"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Relationship between Age and Fare:\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# First, get the data using pandas\n","class_counts = titanic_df['Pclass'].value_counts()\n","print(\"Passenger counts per class:\\n\", class_counts)\n","\n","# The index has the class names (1, 2, 3) and values has the counts\n","# Get the class names (the categories)\n","classes = class_counts.index\n","# Get the counts (the values)\n","counts = class_counts.values\n","\n","# Create a figure and axes\n","fig, ax = plt.subplots()\n","\n","# Plot the bar chart\n","ax.bar(classes, counts)\n","\n","print(\"\\nBar chart showing passengers in each class.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":569},"id":"B3rr4k6Uzyh_","executionInfo":{"status":"ok","timestamp":1752125354280,"user_tz":-330,"elapsed":155,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"afb83175-bada-442a-bc63-af0dbac7d792"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Passenger counts per class:\n"," Pclass\n","3    491\n","1    216\n","2    184\n","Name: count, dtype: int64\n","\n","Bar chart showing passengers in each class.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# A histogram shows the distribution of a single numerical variable by grouping numbers into \"bins\".       Yeh batata hai ki kaunsi range mein kitne log/values aate hain."],"metadata":{"id":"UWAHuGqBz7BX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Create a figure and axes\n","fig, ax = plt.subplots()\n","\n","# Plot the histogram of the 'Age' column\n","# The 'bins' parameter controls how many bars to create\n","ax.hist(titanic_df['Age'], bins=20)\n","\n","print(\"Age distribution of passengers.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"456VvzACzy8W","executionInfo":{"status":"ok","timestamp":1752125372208,"user_tz":-330,"elapsed":179,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"b548c361-d7fc-4298-c318-e237e4feeb2b"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Age distribution of passengers.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Create a figure and axes\n","# figsize=(width, height) in inches. Chalo plot ko thoda bada karte hain.\n","fig, ax = plt.subplots(figsize=(10, 6))\n","\n","# Plot the scatter plot with some style\n","ax.scatter(\n","    titanic_df['Age'],\n","    titanic_df['Fare'],\n","    alpha=0.5,  # Make points semi-transparent to see overlaps\n","    color='purple' # Set a color\n",")\n","\n","# Add title and labels. Yeh bohot zaroori hai!\n","ax.set_title(\"Relationship between Passenger Age and Fare\", fontsize=16)\n","ax.set_xlabel(\"Age\", fontsize=12)\n","ax.set_ylabel(\"Fare Paid\", fontsize=12)\n","\n","# Add a grid for better readability\n","ax.grid(True)\n","\n","print(\"A much better, more professional-looking plot!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":587},"id":"pMwZ9VwSz3UG","executionInfo":{"status":"ok","timestamp":1752125409709,"user_tz":-330,"elapsed":889,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"b84b0887-2376-407d-f8c0-1720e71fb80b"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["A much better, more professional-looking plot!\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Get the passenger counts by class\n","class_counts = titanic_df['Pclass'].value_counts().sort_index() # sort_index is good practice for plotting\n","\n","# Create a bar chart directly from the Pandas Series\n","fig, ax = plt.subplots()\n","class_counts.plot(kind='bar', ax=ax, color='skyblue')\n","ax.set_title(\"Passengers per Class (Pandas Method)\")\n","ax.set_xlabel(\"Passenger Class\")\n","ax.set_ylabel(\"Number of Passengers\")\n","# Rotate x-axis labels for better appearance\n","ax.tick_params(axis='x', rotation=0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"jv08Ukoq0ASm","executionInfo":{"status":"ok","timestamp":1752125425479,"user_tz":-330,"elapsed":575,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"5153016e-0a41-4411-e379-94654d3e54c3"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Create a histogram directly from the 'Age' column USING PANDAS\n","fig, ax = plt.subplots()\n","titanic_df['Age'].plot(kind='hist', ax=ax, bins=20, color='green')\n","ax.set_title(\"Age Distribution (Pandas Method)\")\n","ax.set_xlabel(\"Age\")\n","ax.set_ylabel(\"Frequency\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"158caTzS0EOG","executionInfo":{"status":"ok","timestamp":1752125442019,"user_tz":-330,"elapsed":253,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"119a0b53-7aaf-47b0-afb1-99b02a256594"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Frequency')"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Create a figure and a set of subplots\n","# nrows=1, ncols=2 means 1 row, 2 columns.\n","fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14, 5))\n","\n","# The 'axes' object is now an array. axes[0] is the first plot, axes[1] is the second.\n","\n","# Plot 1: Age Histogram on the first axes\n","axes[0].hist(titanic_df['Age'], bins=20, color='gold')\n","axes[0].set_title('Age Distribution')\n","axes[0].set_xlabel('Age')\n","axes[0].set_ylabel('Frequency')\n","\n","# Plot 2: Fare Histogram on the second axes\n","axes[1].hist(titanic_df['Fare'], bins=30, color='salmon')\n","axes[1].set_title('Fare Distribution')\n","axes[1].set_xlabel('Fare')\n","# axes[1].set_ylabel('Frequency') # Not needed, they share the y-axis concept\n","\n","# Add a main title to the whole figure\n","fig.suptitle('Passenger Data Distributions', fontsize=18)\n","\n","# Adjust layout to prevent titles from overlapping\n","plt.tight_layout(rect=[0, 0, 1, 0.96]) # rect adds space for suptitle\n","\n","print(\"Ek teer se do nishane! One figure, two plots.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":529},"id":"hLXmsA3K0Mof","executionInfo":{"status":"ok","timestamp":1752125461782,"user_tz":-330,"elapsed":583,"user":{"displayName":"RAJ KUSHAGRA","userId":"00333060857976213007"}},"outputId":"a05783ee-2a4d-42b3-a9bd-dbc7c658653e"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Ek teer se do nishane! One figure, two plots.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"ofnBsJov0NFe"},"execution_count":null,"outputs":[]}]}